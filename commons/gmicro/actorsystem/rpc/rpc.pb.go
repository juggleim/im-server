// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: rpc.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The request message
type RpcMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Session   []byte `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	TarMethod string `protobuf:"bytes,3,opt,name=tarMethod,proto3" json:"tarMethod,omitempty"`
	SrcMethod string `protobuf:"bytes,4,opt,name=srcMethod,proto3" json:"srcMethod,omitempty"`
	SrcHost   string `protobuf:"bytes,5,opt,name=srcHost,proto3" json:"srcHost,omitempty"`
	SrcPort   int32  `protobuf:"varint,6,opt,name=srcPort,proto3" json:"srcPort,omitempty"`
	TarHost   string `protobuf:"bytes,7,opt,name=tarHost,proto3" json:"tarHost,omitempty"`
	TarPort   int32  `protobuf:"varint,8,opt,name=tarPort,proto3" json:"tarPort,omitempty"`
	Data      []byte `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
	Extra     []byte `protobuf:"bytes,10,opt,name=extra,proto3" json:"extra,omitempty"`
	TranceId  string `protobuf:"bytes,11,opt,name=tranceId,proto3" json:"tranceId,omitempty"`
}

func (x *RpcMessageRequest) Reset() {
	*x = RpcMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcMessageRequest) ProtoMessage() {}

func (x *RpcMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcMessageRequest.ProtoReflect.Descriptor instead.
func (*RpcMessageRequest) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *RpcMessageRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RpcMessageRequest) GetSession() []byte {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *RpcMessageRequest) GetTarMethod() string {
	if x != nil {
		return x.TarMethod
	}
	return ""
}

func (x *RpcMessageRequest) GetSrcMethod() string {
	if x != nil {
		return x.SrcMethod
	}
	return ""
}

func (x *RpcMessageRequest) GetSrcHost() string {
	if x != nil {
		return x.SrcHost
	}
	return ""
}

func (x *RpcMessageRequest) GetSrcPort() int32 {
	if x != nil {
		return x.SrcPort
	}
	return 0
}

func (x *RpcMessageRequest) GetTarHost() string {
	if x != nil {
		return x.TarHost
	}
	return ""
}

func (x *RpcMessageRequest) GetTarPort() int32 {
	if x != nil {
		return x.TarPort
	}
	return 0
}

func (x *RpcMessageRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RpcMessageRequest) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *RpcMessageRequest) GetTranceId() string {
	if x != nil {
		return x.TranceId
	}
	return ""
}

// The response message
type RpcMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RpcMessageResponse) Reset() {
	*x = RpcMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcMessageResponse) ProtoMessage() {}

func (x *RpcMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcMessageResponse.ProtoReflect.Descriptor instead.
func (*RpcMessageResponse) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *RpcMessageResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

var File_rpc_proto protoreflect.FileDescriptor

var file_rpc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63,
	0x22, 0xab, 0x02, 0x0a, 0x11, 0x52, 0x70, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x72,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x72, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x74, 0x61, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2c,
	0x0a, 0x12, 0x52, 0x70, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x47, 0x0a, 0x0a,
	0x52, 0x70, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x53, 0x65,
	0x6e, 0x64, 0x12, 0x16, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x52, 0x70, 0x63, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x62, 0x6f, 0x74, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_proto_rawDescOnce sync.Once
	file_rpc_proto_rawDescData = file_rpc_proto_rawDesc
)

func file_rpc_proto_rawDescGZIP() []byte {
	file_rpc_proto_rawDescOnce.Do(func() {
		file_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_proto_rawDescData)
	})
	return file_rpc_proto_rawDescData
}

var file_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_rpc_proto_goTypes = []interface{}{
	(*RpcMessageRequest)(nil),  // 0: rpc.RpcMessageRequest
	(*RpcMessageResponse)(nil), // 1: rpc.RpcMessageResponse
}
var file_rpc_proto_depIdxs = []int32{
	0, // 0: rpc.RpcMessage.Send:input_type -> rpc.RpcMessageRequest
	1, // 1: rpc.RpcMessage.Send:output_type -> rpc.RpcMessageResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_rpc_proto_init() }
func file_rpc_proto_init() {
	if File_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_proto_depIdxs,
		MessageInfos:      file_rpc_proto_msgTypes,
	}.Build()
	File_rpc_proto = out.File
	file_rpc_proto_rawDesc = nil
	file_rpc_proto_goTypes = nil
	file_rpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RpcMessageClient is the client API for RpcMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcMessageClient interface {
	Send(ctx context.Context, in *RpcMessageRequest, opts ...grpc.CallOption) (*RpcMessageResponse, error)
}

type rpcMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcMessageClient(cc grpc.ClientConnInterface) RpcMessageClient {
	return &rpcMessageClient{cc}
}

func (c *rpcMessageClient) Send(ctx context.Context, in *RpcMessageRequest, opts ...grpc.CallOption) (*RpcMessageResponse, error) {
	out := new(RpcMessageResponse)
	err := c.cc.Invoke(ctx, "/rpc.RpcMessage/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcMessageServer is the server API for RpcMessage service.
type RpcMessageServer interface {
	Send(context.Context, *RpcMessageRequest) (*RpcMessageResponse, error)
}

// UnimplementedRpcMessageServer can be embedded to have forward compatible implementations.
type UnimplementedRpcMessageServer struct {
}

func (*UnimplementedRpcMessageServer) Send(context.Context, *RpcMessageRequest) (*RpcMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterRpcMessageServer(s *grpc.Server, srv RpcMessageServer) {
	s.RegisterService(&_RpcMessage_serviceDesc, srv)
}

func _RpcMessage_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RpcMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcMessageServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RpcMessage/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcMessageServer).Send(ctx, req.(*RpcMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RpcMessage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RpcMessage",
	HandlerType: (*RpcMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _RpcMessage_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
