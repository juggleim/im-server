// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.5.0
// source: connect.proto

package codec

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConnectMsgBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtoId    string `protobuf:"bytes,1,opt,name=protoId,proto3" json:"protoId,omitempty"`
	SdkVersion string `protobuf:"bytes,2,opt,name=sdkVersion,proto3" json:"sdkVersion,omitempty"` //sdk 版本
	Appkey     string `protobuf:"bytes,3,opt,name=appkey,proto3" json:"appkey,omitempty"`
	Token      string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	// 设备信息
	DeviceId        string `protobuf:"bytes,5,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	Platform        string `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`               //iOS/Android/iPad
	DeviceCompany   string `protobuf:"bytes,7,opt,name=deviceCompany,proto3" json:"deviceCompany,omitempty"`     //设备厂商, huawei/apple
	DeviceModel     string `protobuf:"bytes,8,opt,name=deviceModel,proto3" json:"deviceModel,omitempty"`         //设备型号  例如: iPhone8
	DeviceOsVersion string `protobuf:"bytes,9,opt,name=deviceOsVersion,proto3" json:"deviceOsVersion,omitempty"` //手机操作系统版本
	PushToken       string `protobuf:"bytes,10,opt,name=pushToken,proto3" json:"pushToken,omitempty"`            //厂商推送Token
	// 网络
	NetworkId   string `protobuf:"bytes,11,opt,name=networkId,proto3" json:"networkId,omitempty"`         //网络类型；4G/wifi
	IspNum      string `protobuf:"bytes,12,opt,name=isp_num,json=ispNum,proto3" json:"isp_num,omitempty"` //网络运营商编号
	ClientIp    string `protobuf:"bytes,13,opt,name=clientIp,proto3" json:"clientIp,omitempty"`
	PackageName string `protobuf:"bytes,14,opt,name=packageName,proto3" json:"packageName,omitempty"`
	PushChannel string `protobuf:"bytes,15,opt,name=pushChannel,proto3" json:"pushChannel,omitempty"`
	Ext         string `protobuf:"bytes,16,opt,name=ext,proto3" json:"ext,omitempty"`
	InstanceId  string `protobuf:"bytes,17,opt,name=instanceId,proto3" json:"instanceId,omitempty"` //客户端实例标识,用于多开时识别不同的实例，clientSession
	Language    string `protobuf:"bytes,18,opt,name=language,proto3" json:"language,omitempty"`     //语言设置
	IsBackend   bool   `protobuf:"varint,19,opt,name=isBackend,proto3" json:"isBackend,omitempty"`  //app是否在后台
	VoipToken   string `protobuf:"bytes,20,opt,name=voipToken,proto3" json:"voipToken,omitempty"`   // voip token of iOS
}

func (x *ConnectMsgBody) Reset() {
	*x = ConnectMsgBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connect_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectMsgBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectMsgBody) ProtoMessage() {}

func (x *ConnectMsgBody) ProtoReflect() protoreflect.Message {
	mi := &file_connect_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectMsgBody.ProtoReflect.Descriptor instead.
func (*ConnectMsgBody) Descriptor() ([]byte, []int) {
	return file_connect_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectMsgBody) GetProtoId() string {
	if x != nil {
		return x.ProtoId
	}
	return ""
}

func (x *ConnectMsgBody) GetSdkVersion() string {
	if x != nil {
		return x.SdkVersion
	}
	return ""
}

func (x *ConnectMsgBody) GetAppkey() string {
	if x != nil {
		return x.Appkey
	}
	return ""
}

func (x *ConnectMsgBody) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ConnectMsgBody) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *ConnectMsgBody) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ConnectMsgBody) GetDeviceCompany() string {
	if x != nil {
		return x.DeviceCompany
	}
	return ""
}

func (x *ConnectMsgBody) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *ConnectMsgBody) GetDeviceOsVersion() string {
	if x != nil {
		return x.DeviceOsVersion
	}
	return ""
}

func (x *ConnectMsgBody) GetPushToken() string {
	if x != nil {
		return x.PushToken
	}
	return ""
}

func (x *ConnectMsgBody) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *ConnectMsgBody) GetIspNum() string {
	if x != nil {
		return x.IspNum
	}
	return ""
}

func (x *ConnectMsgBody) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *ConnectMsgBody) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *ConnectMsgBody) GetPushChannel() string {
	if x != nil {
		return x.PushChannel
	}
	return ""
}

func (x *ConnectMsgBody) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *ConnectMsgBody) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *ConnectMsgBody) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *ConnectMsgBody) GetIsBackend() bool {
	if x != nil {
		return x.IsBackend
	}
	return false
}

func (x *ConnectMsgBody) GetVoipToken() string {
	if x != nil {
		return x.VoipToken
	}
	return ""
}

type ConnectAckMsgBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	UserId    string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Session   string `protobuf:"bytes,3,opt,name=session,proto3" json:"session,omitempty"`
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Ext       string `protobuf:"bytes,5,opt,name=ext,proto3" json:"ext,omitempty"`
}

func (x *ConnectAckMsgBody) Reset() {
	*x = ConnectAckMsgBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connect_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectAckMsgBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectAckMsgBody) ProtoMessage() {}

func (x *ConnectAckMsgBody) ProtoReflect() protoreflect.Message {
	mi := &file_connect_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectAckMsgBody.ProtoReflect.Descriptor instead.
func (*ConnectAckMsgBody) Descriptor() ([]byte, []int) {
	return file_connect_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectAckMsgBody) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ConnectAckMsgBody) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ConnectAckMsgBody) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *ConnectAckMsgBody) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ConnectAckMsgBody) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

type DisconnectMsgBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Ext       string `protobuf:"bytes,3,opt,name=ext,proto3" json:"ext,omitempty"`
}

func (x *DisconnectMsgBody) Reset() {
	*x = DisconnectMsgBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connect_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisconnectMsgBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisconnectMsgBody) ProtoMessage() {}

func (x *DisconnectMsgBody) ProtoReflect() protoreflect.Message {
	mi := &file_connect_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisconnectMsgBody.ProtoReflect.Descriptor instead.
func (*DisconnectMsgBody) Descriptor() ([]byte, []int) {
	return file_connect_proto_rawDescGZIP(), []int{2}
}

func (x *DisconnectMsgBody) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DisconnectMsgBody) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DisconnectMsgBody) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

type PublishMsgBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Topic     string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	TargetId  string `protobuf:"bytes,3,opt,name=targetId,proto3" json:"targetId,omitempty"`
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data      []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublishMsgBody) Reset() {
	*x = PublishMsgBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connect_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishMsgBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMsgBody) ProtoMessage() {}

func (x *PublishMsgBody) ProtoReflect() protoreflect.Message {
	mi := &file_connect_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMsgBody.ProtoReflect.Descriptor instead.
func (*PublishMsgBody) Descriptor() ([]byte, []int) {
	return file_connect_proto_rawDescGZIP(), []int{3}
}

func (x *PublishMsgBody) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *PublishMsgBody) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PublishMsgBody) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *PublishMsgBody) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PublishMsgBody) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PublishAckMsgBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Code        int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	MsgId       string `protobuf:"bytes,3,opt,name=msgId,proto3" json:"msgId,omitempty"`
	Timestamp   int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	MsgSeqNo    int64  `protobuf:"varint,5,opt,name=msgSeqNo,proto3" json:"msgSeqNo,omitempty"`
	MemberCount int32  `protobuf:"varint,6,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	ClientMsgId string `protobuf:"bytes,7,opt,name=clientMsgId,proto3" json:"clientMsgId,omitempty"`
}

func (x *PublishAckMsgBody) Reset() {
	*x = PublishAckMsgBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connect_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishAckMsgBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishAckMsgBody) ProtoMessage() {}

func (x *PublishAckMsgBody) ProtoReflect() protoreflect.Message {
	mi := &file_connect_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishAckMsgBody.ProtoReflect.Descriptor instead.
func (*PublishAckMsgBody) Descriptor() ([]byte, []int) {
	return file_connect_proto_rawDescGZIP(), []int{4}
}

func (x *PublishAckMsgBody) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *PublishAckMsgBody) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PublishAckMsgBody) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *PublishAckMsgBody) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PublishAckMsgBody) GetMsgSeqNo() int64 {
	if x != nil {
		return x.MsgSeqNo
	}
	return 0
}

func (x *PublishAckMsgBody) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *PublishAckMsgBody) GetClientMsgId() string {
	if x != nil {
		return x.ClientMsgId
	}
	return ""
}

type QueryMsgBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Topic     string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	TargetId  string `protobuf:"bytes,3,opt,name=targetId,proto3" json:"targetId,omitempty"`
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data      []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryMsgBody) Reset() {
	*x = QueryMsgBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connect_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMsgBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMsgBody) ProtoMessage() {}

func (x *QueryMsgBody) ProtoReflect() protoreflect.Message {
	mi := &file_connect_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMsgBody.ProtoReflect.Descriptor instead.
func (*QueryMsgBody) Descriptor() ([]byte, []int) {
	return file_connect_proto_rawDescGZIP(), []int{5}
}

func (x *QueryMsgBody) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *QueryMsgBody) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *QueryMsgBody) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *QueryMsgBody) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *QueryMsgBody) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryAckMsgBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     int32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Code      int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Data      []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *QueryAckMsgBody) Reset() {
	*x = QueryAckMsgBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connect_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryAckMsgBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAckMsgBody) ProtoMessage() {}

func (x *QueryAckMsgBody) ProtoReflect() protoreflect.Message {
	mi := &file_connect_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAckMsgBody.ProtoReflect.Descriptor instead.
func (*QueryAckMsgBody) Descriptor() ([]byte, []int) {
	return file_connect_proto_rawDescGZIP(), []int{6}
}

func (x *QueryAckMsgBody) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *QueryAckMsgBody) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryAckMsgBody) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *QueryAckMsgBody) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type QueryConfirmMsgBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *QueryConfirmMsgBody) Reset() {
	*x = QueryConfirmMsgBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connect_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryConfirmMsgBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryConfirmMsgBody) ProtoMessage() {}

func (x *QueryConfirmMsgBody) ProtoReflect() protoreflect.Message {
	mi := &file_connect_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryConfirmMsgBody.ProtoReflect.Descriptor instead.
func (*QueryConfirmMsgBody) Descriptor() ([]byte, []int) {
	return file_connect_proto_rawDescGZIP(), []int{7}
}

func (x *QueryConfirmMsgBody) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type ImWebsocketMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Cmd     int32  `protobuf:"varint,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	Qos     int32  `protobuf:"varint,3,opt,name=qos,proto3" json:"qos,omitempty"`
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	// Types that are assignable to Testof:
	//
	//	*ImWebsocketMsg_ConnectMsgBody
	//	*ImWebsocketMsg_ConnectAckMsgBody
	//	*ImWebsocketMsg_DisconnectMsgBody
	//	*ImWebsocketMsg_PublishMsgBody
	//	*ImWebsocketMsg_PubAckMsgBody
	//	*ImWebsocketMsg_QryMsgBody
	//	*ImWebsocketMsg_QryAckMsgBody
	//	*ImWebsocketMsg_QryConfirmMsgBody
	Testof isImWebsocketMsg_Testof `protobuf_oneof:"testof"`
}

func (x *ImWebsocketMsg) Reset() {
	*x = ImWebsocketMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connect_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImWebsocketMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImWebsocketMsg) ProtoMessage() {}

func (x *ImWebsocketMsg) ProtoReflect() protoreflect.Message {
	mi := &file_connect_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImWebsocketMsg.ProtoReflect.Descriptor instead.
func (*ImWebsocketMsg) Descriptor() ([]byte, []int) {
	return file_connect_proto_rawDescGZIP(), []int{8}
}

func (x *ImWebsocketMsg) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ImWebsocketMsg) GetCmd() int32 {
	if x != nil {
		return x.Cmd
	}
	return 0
}

func (x *ImWebsocketMsg) GetQos() int32 {
	if x != nil {
		return x.Qos
	}
	return 0
}

func (x *ImWebsocketMsg) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (m *ImWebsocketMsg) GetTestof() isImWebsocketMsg_Testof {
	if m != nil {
		return m.Testof
	}
	return nil
}

func (x *ImWebsocketMsg) GetConnectMsgBody() *ConnectMsgBody {
	if x, ok := x.GetTestof().(*ImWebsocketMsg_ConnectMsgBody); ok {
		return x.ConnectMsgBody
	}
	return nil
}

func (x *ImWebsocketMsg) GetConnectAckMsgBody() *ConnectAckMsgBody {
	if x, ok := x.GetTestof().(*ImWebsocketMsg_ConnectAckMsgBody); ok {
		return x.ConnectAckMsgBody
	}
	return nil
}

func (x *ImWebsocketMsg) GetDisconnectMsgBody() *DisconnectMsgBody {
	if x, ok := x.GetTestof().(*ImWebsocketMsg_DisconnectMsgBody); ok {
		return x.DisconnectMsgBody
	}
	return nil
}

func (x *ImWebsocketMsg) GetPublishMsgBody() *PublishMsgBody {
	if x, ok := x.GetTestof().(*ImWebsocketMsg_PublishMsgBody); ok {
		return x.PublishMsgBody
	}
	return nil
}

func (x *ImWebsocketMsg) GetPubAckMsgBody() *PublishAckMsgBody {
	if x, ok := x.GetTestof().(*ImWebsocketMsg_PubAckMsgBody); ok {
		return x.PubAckMsgBody
	}
	return nil
}

func (x *ImWebsocketMsg) GetQryMsgBody() *QueryMsgBody {
	if x, ok := x.GetTestof().(*ImWebsocketMsg_QryMsgBody); ok {
		return x.QryMsgBody
	}
	return nil
}

func (x *ImWebsocketMsg) GetQryAckMsgBody() *QueryAckMsgBody {
	if x, ok := x.GetTestof().(*ImWebsocketMsg_QryAckMsgBody); ok {
		return x.QryAckMsgBody
	}
	return nil
}

func (x *ImWebsocketMsg) GetQryConfirmMsgBody() *QueryConfirmMsgBody {
	if x, ok := x.GetTestof().(*ImWebsocketMsg_QryConfirmMsgBody); ok {
		return x.QryConfirmMsgBody
	}
	return nil
}

type isImWebsocketMsg_Testof interface {
	isImWebsocketMsg_Testof()
}

type ImWebsocketMsg_ConnectMsgBody struct {
	ConnectMsgBody *ConnectMsgBody `protobuf:"bytes,11,opt,name=connectMsgBody,proto3,oneof"`
}

type ImWebsocketMsg_ConnectAckMsgBody struct {
	ConnectAckMsgBody *ConnectAckMsgBody `protobuf:"bytes,12,opt,name=ConnectAckMsgBody,proto3,oneof"`
}

type ImWebsocketMsg_DisconnectMsgBody struct {
	DisconnectMsgBody *DisconnectMsgBody `protobuf:"bytes,13,opt,name=disconnectMsgBody,proto3,oneof"`
}

type ImWebsocketMsg_PublishMsgBody struct {
	PublishMsgBody *PublishMsgBody `protobuf:"bytes,14,opt,name=publishMsgBody,proto3,oneof"`
}

type ImWebsocketMsg_PubAckMsgBody struct {
	PubAckMsgBody *PublishAckMsgBody `protobuf:"bytes,15,opt,name=pubAckMsgBody,proto3,oneof"`
}

type ImWebsocketMsg_QryMsgBody struct {
	QryMsgBody *QueryMsgBody `protobuf:"bytes,16,opt,name=qryMsgBody,proto3,oneof"`
}

type ImWebsocketMsg_QryAckMsgBody struct {
	QryAckMsgBody *QueryAckMsgBody `protobuf:"bytes,17,opt,name=qryAckMsgBody,proto3,oneof"`
}

type ImWebsocketMsg_QryConfirmMsgBody struct {
	QryConfirmMsgBody *QueryConfirmMsgBody `protobuf:"bytes,18,opt,name=qryConfirmMsgBody,proto3,oneof"`
}

func (*ImWebsocketMsg_ConnectMsgBody) isImWebsocketMsg_Testof() {}

func (*ImWebsocketMsg_ConnectAckMsgBody) isImWebsocketMsg_Testof() {}

func (*ImWebsocketMsg_DisconnectMsgBody) isImWebsocketMsg_Testof() {}

func (*ImWebsocketMsg_PublishMsgBody) isImWebsocketMsg_Testof() {}

func (*ImWebsocketMsg_PubAckMsgBody) isImWebsocketMsg_Testof() {}

func (*ImWebsocketMsg_QryMsgBody) isImWebsocketMsg_Testof() {}

func (*ImWebsocketMsg_QryAckMsgBody) isImWebsocketMsg_Testof() {}

func (*ImWebsocketMsg_QryConfirmMsgBody) isImWebsocketMsg_Testof() {}

var File_connect_proto protoreflect.FileDescriptor

var file_connect_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe1, 0x04, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70,
	0x70, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x73, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x73, 0x68, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75,
	0x73, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x69, 0x70, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x69, 0x70, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41,
	0x63, 0x6b, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22,
	0x57, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x67,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x78, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x0e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd1, 0x01, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73, 0x67,
	0x53, 0x65, 0x71, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x73, 0x67,
	0x53, 0x65, 0x71, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x0c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x6d, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x6b,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0xdd, 0x04, 0x0a, 0x0e, 0x49, 0x6d, 0x57, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x71, 0x6f,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x39, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x67,
	0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d,
	0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x42, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x63, 0x6b, 0x4d, 0x73,
	0x67, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x42, 0x0a, 0x11, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x11, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x39,
	0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3a, 0x0a, 0x0d, 0x70, 0x75, 0x62,
	0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67,
	0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x41, 0x63, 0x6b, 0x4d, 0x73,
	0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x2f, 0x0a, 0x0a, 0x71, 0x72, 0x79, 0x4d, 0x73, 0x67, 0x42,
	0x6f, 0x64, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x71, 0x72, 0x79, 0x4d,
	0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x38, 0x0a, 0x0d, 0x71, 0x72, 0x79, 0x41, 0x63, 0x6b,
	0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x48,
	0x00, 0x52, 0x0d, 0x71, 0x72, 0x79, 0x41, 0x63, 0x6b, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x44, 0x0a, 0x11, 0x71, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4d, 0x73,
	0x67, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4d, 0x73, 0x67, 0x42, 0x6f, 0x64,
	0x79, 0x48, 0x00, 0x52, 0x11, 0x71, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4d,
	0x73, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x65, 0x73, 0x74, 0x6f, 0x66,
	0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_connect_proto_rawDescOnce sync.Once
	file_connect_proto_rawDescData = file_connect_proto_rawDesc
)

func file_connect_proto_rawDescGZIP() []byte {
	file_connect_proto_rawDescOnce.Do(func() {
		file_connect_proto_rawDescData = protoimpl.X.CompressGZIP(file_connect_proto_rawDescData)
	})
	return file_connect_proto_rawDescData
}

var file_connect_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_connect_proto_goTypes = []interface{}{
	(*ConnectMsgBody)(nil),      // 0: ConnectMsgBody
	(*ConnectAckMsgBody)(nil),   // 1: ConnectAckMsgBody
	(*DisconnectMsgBody)(nil),   // 2: DisconnectMsgBody
	(*PublishMsgBody)(nil),      // 3: PublishMsgBody
	(*PublishAckMsgBody)(nil),   // 4: PublishAckMsgBody
	(*QueryMsgBody)(nil),        // 5: QueryMsgBody
	(*QueryAckMsgBody)(nil),     // 6: QueryAckMsgBody
	(*QueryConfirmMsgBody)(nil), // 7: QueryConfirmMsgBody
	(*ImWebsocketMsg)(nil),      // 8: ImWebsocketMsg
}
var file_connect_proto_depIdxs = []int32{
	0, // 0: ImWebsocketMsg.connectMsgBody:type_name -> ConnectMsgBody
	1, // 1: ImWebsocketMsg.ConnectAckMsgBody:type_name -> ConnectAckMsgBody
	2, // 2: ImWebsocketMsg.disconnectMsgBody:type_name -> DisconnectMsgBody
	3, // 3: ImWebsocketMsg.publishMsgBody:type_name -> PublishMsgBody
	4, // 4: ImWebsocketMsg.pubAckMsgBody:type_name -> PublishAckMsgBody
	5, // 5: ImWebsocketMsg.qryMsgBody:type_name -> QueryMsgBody
	6, // 6: ImWebsocketMsg.qryAckMsgBody:type_name -> QueryAckMsgBody
	7, // 7: ImWebsocketMsg.qryConfirmMsgBody:type_name -> QueryConfirmMsgBody
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_connect_proto_init() }
func file_connect_proto_init() {
	if File_connect_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_connect_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectMsgBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connect_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectAckMsgBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connect_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisconnectMsgBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connect_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishMsgBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connect_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishAckMsgBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connect_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMsgBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connect_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryAckMsgBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connect_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryConfirmMsgBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connect_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImWebsocketMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_connect_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ImWebsocketMsg_ConnectMsgBody)(nil),
		(*ImWebsocketMsg_ConnectAckMsgBody)(nil),
		(*ImWebsocketMsg_DisconnectMsgBody)(nil),
		(*ImWebsocketMsg_PublishMsgBody)(nil),
		(*ImWebsocketMsg_PubAckMsgBody)(nil),
		(*ImWebsocketMsg_QryMsgBody)(nil),
		(*ImWebsocketMsg_QryAckMsgBody)(nil),
		(*ImWebsocketMsg_QryConfirmMsgBody)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_connect_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_connect_proto_goTypes,
		DependencyIndexes: file_connect_proto_depIdxs,
		MessageInfos:      file_connect_proto_msgTypes,
	}.Build()
	File_connect_proto = out.File
	file_connect_proto_rawDesc = nil
	file_connect_proto_goTypes = nil
	file_connect_proto_depIdxs = nil
}
